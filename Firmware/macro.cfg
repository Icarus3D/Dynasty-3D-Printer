###########################
# Creator: Icarus3D
# Creation Date: 01.11.2021
# Last Update: 04.03.2022
# Version: V2.1
###########################

# Mainsail Doc: https://docs.mainsail.xyz/
# Klipper gcode: https://www.klipper3d.org/G-Codes.html
# Klipper command: https://www.klipper3d.org/Command_Templates.html
# jinja template: https://jinja.palletsprojects.com/en/3.0.x/templates/

# Tips: Prefixing the name with an underscore hide the macro on the interface

#####################################################################
#        G-Code macros and events
#####################################################################
#----------------------------------------
#       START & END SCRIPT
#----------------------------------------

# Maybe usefull with start gcode:
;SET_VELOCITY_LIMIT VELOCITY=350 ACCEL=5000 ACCEL_TO_DECEL=5000 SQUARE_CORNER_VELOCITY=5
;SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0.048 SMOOTH_TIME=0.04
;SET_FILAMENT_SENSOR SENSOR=smart_filament_sensor ENABLE=1
;START_PRINT T_BED={temperature_heatbed} T_EXTRUDER={temperature_extruder1}

# Print start script preheating the nozzle above the purge bucket and wiping it with the brush
# Declaration: START_PRINT T_BED=<temperature(°C)> T_EXTRUDER=<temperature(°C)>
# Example: START_PRINT T_BED=60 T_EXTRUDER=205
# Example CURA: START_PRINT T_BED={material_bed_temperature_layer_0} T_EXTRUDER={material_print_temperature_layer_0}
# Example SIMPLIFY3D: START_PRINT T_BED=[bed0_temperature] T_EXTRUDER=[extruder0_temperature]
[gcode_macro START_PRINT]
description: Startup script, preheating hotend above purge bucket
gcode:
    CLEAR_PAUSE                         # Clears the current paused state without resuming the print
    G90                                 # Absolute positioning
    M82                                 # Extruder absolut
    M106 S0                             # Fan off
    G28                                 # Home all axes
    Z_TILT_ADJUST                       # Do a z tilt to ajust the bed
    BED_MESH_PROFILE LOAD=default       # Load bed mesh
    G0 X-5.00 Y0.00 F3600               # Move nozzle near purget backet at 60mm/s
    G0 Z1.00 F600                       # Raise the bed after the z tilt
    M400                                # Wait for current moves to finish
    G0 X-5.00 Y-24.00 F3600             # Move nozzle above purget backet at 60mm/s
    SET_LED LED=light_hotend RED=0.56 GREEN=0.00 BLUE=1.00 WHITE=0.00   # Set neopixel violet
    #M117 Start preheating               # Message
    M104 S140                           # Set preheat hotend
    M190 S{params.T_BED}                # Set preheat bed and wait
    SET_LED LED=light_hotend RED=1.00 GREEN=0.00 BLUE=0.00 WHITE=0.00   # Set neopixel red
    M109 S{params.T_EXTRUDER}           # Set preheat hotend and wait
    SET_LED LED=light_hotend RED=0.00 GREEN=0.00 BLUE=0.00 WHITE=0.40   # Set neopixel white
    G92 E0                              # Zero the extruder
    G1 E10.0 F150                        # Extrude 10mm at 2.5mm/s
    M400                                # Wait for current moves to finish
    G92 E0                              # Zero the extruder
    G0 X35.00 Y-24.00 F3600             # Brush nozzle 3 times at 60mm/s
    G0 X25.00 Y-24.00 F3600 
    G0 X35.00 Y-24.00 F3600
    G0 X25.00 Y-24.00 F3600
    G0 X35.00 Y-24.00 F3600
    G0 X25.00 Y-24.00 F3600
    #M117 Start print                    # Message

# Print ending script
# Example: END_PRINT AUTO_SHUTDOWN=True
[gcode_macro END_PRINT]
description: End script, Move hotend, turn off heater, motor and power down printer 
gcode:
    ##### set auto_shutdown default #####
    {% set auto_shutdown = params.AUTO_SHUTDOWN|default(false) %}
    ##### end of definitions #####
    M400                           # Wait for current moves to finish
    G91                            # Relative positioning
    G0 X5.00 Y5.00 Z5.00 F3600      # Move nozzle up to remove stringing at 60mm/s
    G92 E0                         # Zero the extruder
    G1 E-1 F2400                 # Retract filament by 1mm at 40mm/s
    TURN_OFF_HEATERS
    SET_LED LED=light_hotend RED=0.00 GREEN=0.00 BLUE=1.00 WHITE=0.00   # Set neopixel blue
    M107                           # Turn off fan
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0  # Turn off exaust fan
    G90                            # Absolute positioning
    G0 X155 Y310 F3600             # Park nozzle to the rear center at 60mm/s
    #G0 X-4 Y-20 F3600             # Park nozzle to the front left at 60mm/s
    M400                            # Wait for current moves to finish
    M84                            # Turn off all motors
    TIMELAPSE_RENDER                # Render timelapse
    {% if auto_shutdown == "true" or auto_shutdown == "True" %}
        M117 Printer will shutdown when the hotend reaches 50C      # Message
        RESPOND PREFIX=tgalarm_photo MSG="Finished printing. Printer will shutdown when the hotend reaches 50C"
        TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=50 # Wait until the hotend temp drops below 50°C
        RESPOND PREFIX=tgnotify MSG="Printer power off"
        G4 P5000                                    # Wait 5sec to send notify
        SET_PIN PIN=power_supply VALUE=0            # Shutdown the printer
    {% else %}
        M117 Printing finished      # Message
        RESPOND PREFIX=tgalarm_photo MSG="Finished printing"
    {% endif %}


#----------------------------------------
#       FILAMENT
#----------------------------------------
# Distance between nozzle and extruder gear = 97mm
# Distance between nozzle and top orbiter = 126mm
# Distance between start heatbreak and top extruder gear = 58m
# Distance from the nozzle tip to the PTFE end = 90mm
# Warning!: With the unload macro, do not exceed the distance of the extruder gears that may crush the filament
[gcode_macro UNLOAD_FILAMENT]
description: Unload the filament just before the gears
gcode:
    SAVE_GCODE_STATE NAME=unload_filament_state
    M83                            # Set extruder to relative
    G1 E5 F300                    # Extrude a little to soften tip at 5mm/s
    G1 E-66 F2400                 # Retract filament completely at 40mm/s
    #M84 E0                       # Disable extruder stepper
    RESTORE_GCODE_STATE NAME=unload_filament_state

[gcode_macro LOAD_FILAMENT]
description: Load the filament and purge a little
gcode:
    SAVE_GCODE_STATE NAME=load_filament_state
    M83                            # Set extruder to relative
    G1 E60 F1200                  # Quickly load filament to down bowden at 20mm/s
    G1 E50 F300                    # Slower extrusion for hotend path at 5mm/s
    G1 E15 F150                    # Prime nozzle with filament at 2.5mm/s
    RESTORE_GCODE_STATE NAME=load_filament_state

# Change filament
[gcode_macro M600]
description: Change filament, use PAUSE macro
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set x,y,z default #####
    {% set X = params.X|default(155)|float %}
    {% set Y = params.Y|default(-24)|float %}
    {% set Z = params.Z|default(10)|float %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91                         # Relative coordinates
    G1 Z{Z}
    G90                         # Absolute coordinates
    G1 X{X} Y{Y} F3000
    G91                         # Relative coordinates
    G1 E{E} F1800               # Extrud 1.6mm at 30mm/s
    G1 E-80 F2400              # Retract extruder 80mm at 40mm/s
    RESTORE_GCODE_STATE NAME=M600_state

# Filament detector runout macro
[gcode_macro FILAMENT_RUNOUT]
description: Macro called when the filament detector detects an error
gcode:
    M117 Pause called by the filament sensor
    RESPOND PREFIX=tgalarm_photo MSG="Pause called by the filament sensor"


#----------------------------------------
#       SHORTCUT
#----------------------------------------
# Save actual configuration in printer.cfg
[gcode_macro CONFIG_SAVE]
gcode:
    SAVE_CONFIG

# Power down printer with the main SSR
[gcode_macro POWER_OFF]
gcode:
    SET_PIN PIN=power_supply VALUE=0

# Turn off neopixel
[gcode_macro LIGHT_OFF]
gcode:
    SET_LED LED=light_hotend RED=0.00 GREEN=0.00 BLUE=0.00 WHITE=0.00

# Turn on only withe neopixel
# Example: LIGHT_ON RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0
[gcode_macro LIGHT_ON]
gcode:
    ##### end of definitions #####
    {% set red = params.RED|default(0.0)|float %}
    {% set green = params.GREEN|default(0.0)|float %}
    {% set blue = params.BLUE|default(0.0)|float %}
    {% set white = params.WHITE|default(1.0)|float %}
    ##### end of definitions #####
    #SET_LED LED=light_hotend RED=0.00 GREEN=0.00 BLUE=0.00 WHITE=1.00
    SET_LED LED=light_hotend RED={red} GREEN={green} BLUE={blue} WHITE={white}

# Disable all stepper motors
[gcode_macro DISABLE_MOTORS]
gcode:
    M84


#----------------------------------------
#       MOTION
#----------------------------------------
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(2)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(30)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

# Move the hotend at xyz position
[gcode_macro MOVE_HOTEND]
description: Move the hotend at xyz position
gcode:
    ##### set x,y,z default #####
    {% set X = params.X|default(155)|float %}
    {% set Y = params.Y|default(-24)|float %}
    {% set Z = params.Z|default(0)|float %}
    ##### end of definitions #####
    G90                         # Absolute coordinates
    G0 X{X} Y{Y} F3600          # Move hotend at 60mm/s
    G91                         # Relative coordinates
    G0 Z{Z} F600                # Move z at 10mm/s


#----------------------------------------
#       MANDATORY
#----------------------------------------
# Macro from mainsail.cfg
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    M107                # Turn off fan
    CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.6
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}